name: CD – Deploy on release

on:
    push:
        branches:
            - release

jobs:
    build_and_push:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up JDK 17
              uses: actions/setup-java@v4
              with:
                  distribution: temurin
                  java-version: 17

            - name: Make gradlew executable
              run: chmod +x gradlew

            - name: Build with Gradle
              run: ./gradlew clean bootJar --no-daemon

            - name: Build Docker image
              run: |
                  docker build -t ncookie99/tickenity-api:latest .

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Push image to Docker Hub
              run: docker push ncookie99/tickenity-api:latest
    
    deploy:
        needs: build_and_push
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
              
            - name: EC2에 docker-compose.yml 업로드
              uses: appleboy/scp-action@v0.1.4
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USER }}
                key: ${{ secrets.EC2_SSH_KEY }}
                source: docker-compose.prod.yml
                target: /home/${{ secrets.EC2_USER }}/apps/tickenity-api
                
            - name: SSH & Deploy to EC2
              uses: appleboy/ssh-action@v0.1.7
              with:
                  host: ${{ secrets.EC2_HOST }}
                  username: ${{ secrets.EC2_USER }}
                  key: ${{ secrets.EC2_SSH_KEY }}
                  script: |
                      # 배포 디렉토리로 이동
                      cd /home/${{ secrets.EC2_USER }}/apps/tickenity-api
                      
                      # .env 파일 업로드
                      echo "${{ secrets.ENV_PROD_FILE }}" > .env
                      
                      # Docker Hub에 푸시된 이미지를 가져와서 컨테이너 재시작
                      docker-compose -f docker-compose.prod.yml pull
                      docker-compose -f docker-compose.prod.yml up -d

            # 배포 정상 완료 여부 체크
            - name: Verify /health endpoint
              run: |
                  echo "Waiting for service on ${{ secrets.EC2_HOST }}:8081/health..."
                  for i in $(seq 1 10); do
                    if curl -sSf http://${{ secrets.EC2_HOST }}:8081/health; then
                      echo "✅ Service is healthy!"
                      exit 0
                    fi
                    echo "  attempt $i failed, retrying in 5s..."
                    sleep 5
                  done
                  echo "❌ Health check failed."
                  exit 1